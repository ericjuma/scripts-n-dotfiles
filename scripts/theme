#!/bin/python

import pywal as wal
from sys import argv
import shutil
import os
import random
from pathlib import Path


def path(relative_path_string):
    return Path.expanduser(Path(relative_path_string))

walcache = path('~/.cache/wal/')
themepath = path('~/.config/wal/colorschemes')

def notify(text):
    os.system(f"notify-send -t 10000 '{text}'")

def record_theme_path(theme):
    with open(walcache / 'colors.path', 'w') as f:
        f.write(str(theme))

def current_theme():
    return path((walcache / 'colors.path').read_text())

def restart_qtile():
    os.system("qtile-cmd -o cmd -f restart > /dev/null 2>&1")

def rgb2hex(t):
    return '#' + ''.join(tuple(map(
        lambda n: hex(n)[2:].rjust(2, '0')[-2:], t
    )))


def hex2rgb(s):
    return tuple(map(
        lambda n: int(n, 16),
        [s[1:3], s[3:5], s[5:7]]
    ))

def tint(color, factor):
    return rgb2hex(
        [int(min(n * factor, 255)) for n in hex2rgb(color)]
    )

def set_wallpaper(color):
    factor = 0.90 if get_info("mode") == "dark" else 1.15
    tinted = tint(color, factor)
    os.system(f"convert -size 100x100 xc:{tinted} jpeg:- | feh --bg-scale -")

def apply_theme(colors):
    assert type(colors) == dict
    wal.sequences.send(colors)
    wal.export.every(colors)
    wallcolor("bg")
    wal.reload.env()
    restart_qtile()

def delete_theme(theme):
    new_path = theme.parent.parent / 'trash' / theme.name
    shutil.copyfile(theme, new_path)

def appreciate_theme(theme):
    new_path = theme.parent.parent / ('best-' + theme.parent.name) / theme.name
    shutil.copyfile(theme, new_path)

################################################################################

def wallcolor(colortype):
    colors = wal.colors.file(str(current_theme()))
    if (colortype == "bg"):
        set_wallpaper(colors["special"]["background"])
    elif (colortype == "gray"):
        set_wallpaper(colors["colors"]["color8"])
    else:
        colors = list(colors["special"].values()) + list(colors["colors"].values())
        print(colors)
        set_wallpaper(random.choice(colors))

def color_theme(theme_type):
    possible_themes = themepath.rglob(f'{theme_type}/*.json')
    theme = random.choice(list(possible_themes))
    
    print(f'Theme: {theme}')
    record_theme_path(theme)

    theme_colors = wal.colors.file(str(theme))
    apply_theme(theme_colors)
    notify('theme set: {}'.format(theme.stem))

def delete_current_theme():
    t = current_theme()
    delete_theme(t)
    notify('theme deleted: {}'.format(t.stem))

def appreciate_current_theme():
    t = current_theme()
    appreciate_theme(t)
    notify('theme appreciated: {}'.format(t.stem))

def get_info(arg):
    if arg == 'mode':
        print(current_theme().parent.name.split("best-")[-1])
    elif arg == 'name':
        print(current_theme().stem)
    elif arg == 'path':
        print(str(current_theme()))
    elif arg == 'colors':
        print((walcache / "colors.yml").read_text())
    elif arg == 'dirs':
        os.system('ls --color=auto ~/.config/wal/colorschemes')

def wall_theme(wall_name, brightness, walls_path="~/pics/walls"):
    walls = path(walls_path)

    if wall_name == "random":
        wall = random.choice(list(walls.iterdir()))
    else:
        wall = next(walls.glob(f"{wall_name}*"))

    record_theme_path(wall)
    brightness = "-l" if brightness in ["light", "l", "bright"] else ""
    os.system(f"wal -i {wall} {brightness}")
    restart_qtile()

def print_help():
    print('\n'.join([
        "Commands:",
        "",
        "color <dir>",
        "    this chooses a random colorscheme",
        "    from the <dir> directory",
        "",
        "wallcolor <name>",
        "    set wallpaper color to bg, gray, or random",
        "",
        "wall <name>",
        "    sets colorscheme based on wallpaper in",
        "    ~/pics/walls, file extension not needed",
        "",
        "delete",
        "   this moves the current theme to the trash",
        "   directory in colorschemes",
        "",
        "appreciate",
        "   this moves the current theme, say,",
        "   '...colorschemes/dark/the.json' to",
        "   '...colorschemes/best-dark/the.json'",
        "",
        "get",
        "   mode, name, path, colors, dirs",
    ]))

################################################################################

if __name__ == "__main__":
    main_command = argv[1]
    arg_map = {
        "set": color_theme,
        "wall": wall_theme,
        "wallcolor": wallcolor,
        "delete": delete_current_theme,
        "appreciate": appreciate_current_theme,
        "help": print_help,
        "get": get_info
    }
    if len(argv) > 2:
        arg_map[main_command](*argv[2:])
    else:
        arg_map[main_command]()
